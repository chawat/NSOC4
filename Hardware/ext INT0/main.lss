
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005c4  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006e8  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>

ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
int i;

for(i=0;i<4;i++){
PORTB=0x01;
  88:	61 e0       	ldi	r22, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	40 e3       	ldi	r20, 0x30	; 48
  8c:	55 e7       	ldi	r21, 0x75	; 117
  8e:	68 bb       	out	0x18, r22	; 24
  90:	ca 01       	movw	r24, r20
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__vector_1+0x26>
_delay_ms(10);
PORTB=0x00;
  96:	18 ba       	out	0x18, r1	; 24
  98:	ca 01       	movw	r24, r20
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <__vector_1+0x2e>
#include<avr/interrupt.h>

ISR(INT0_vect){
int i;

for(i=0;i<4;i++){
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	3f 4f       	sbci	r19, 0xFF	; 255
  a2:	24 30       	cpi	r18, 0x04	; 4
  a4:	31 05       	cpc	r19, r1
  a6:	99 f7       	brne	.-26     	; 0x8e <__vector_1+0x22>
_delay_ms(10);

}


}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	6f 91       	pop	r22
  ae:	5f 91       	pop	r21
  b0:	4f 91       	pop	r20
  b2:	3f 91       	pop	r19
  b4:	2f 91       	pop	r18
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:



void main(){
DDRD=0x01;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	81 bb       	out	0x11, r24	; 17
PORTD=0b00000100;
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	92 bb       	out	0x12, r25	; 18
DDRB=0x01;
  c8:	87 bb       	out	0x17, r24	; 23
MCUCR=0x01;
  ca:	85 bf       	out	0x35, r24	; 53
GICR=0x40;
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	8b bf       	out	0x3b, r24	; 59
sei();
  d0:	78 94       	sei
  d2:	2c e2       	ldi	r18, 0x2C	; 44
  d4:	31 e0       	ldi	r19, 0x01	; 1


while(1){
PORTB=0x00;
_delay_ms(100);
PORTB=0x01;
  d6:	41 e0       	ldi	r20, 0x01	; 1
GICR=0x40;
sei();


while(1){
PORTB=0x00;
  d8:	18 ba       	out	0x18, r1	; 24
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x1e>
_delay_ms(100);
PORTB=0x01;
  e8:	48 bb       	out	0x18, r20	; 24
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x2e>
  f8:	ef cf       	rjmp	.-34     	; 0xd8 <main+0x18>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
