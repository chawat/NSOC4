   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  69               	.global	__vector_1
  71               	__vector_1:
   1:main.c        **** #include<avr/io.h>
   2:main.c        **** #include<util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** 
   5:main.c        **** ISR(INT0_vect){
  72               	n r0,__SREG__
  73               		push r0
  74               		clr __zero_reg__
  75 0000 1F92      		push r18
  76 0002 0F92      		push r19
  77 0004 0FB6      		push r20
  78 0006 0F92      		push r21
  79 0008 1124      		push r22
  80 000a 2F93      		push r24
  81 000c 3F93      		push r25
  82 000e 4F93      	/* prologue: Signal */
  83 0010 5F93      	/* frame size = 0 */
  85 0014 8F93      	.LM1:
  86 0016 9F93      		ldi r18,lo8(0)
  87               		ldi r19,hi8(0)
  89               	.LM2:
  90               		ldi r22,lo8(1)
  91 0018 20E0      	.LBB30:
  92 001a 30E0      	.LBB31:
   6:main.c        **** int i;
   7:main.c        **** 
   8:main.c        **** for(i=0;i<4;i++){
   9:main.c        **** PORTB=0x01;
  93               	bs	"g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
  94               	.Ltext1:
  96               	.LM3:
  97               		ldi r20,lo8(30000)
  98               		ldi r21,hi8(30000)
  99               	.L2:
 100               	.LBE33:
 101               	.LBE32:
   1:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 102               	LBE30:
 104 001e 40E3      	.Ltext2:
 106               	.LM4:
 107               		out 56-32,r22
 108               	.LBB37:
 109               	.LBB36:
 110               	.LBB35:
 111               	.LBB34:
 113               	.Ltext3:
 115 0022 68BB      	.LM5:
 116               		movw r24,r20
 117               	/* #APP */
 118               	 ;  105 "g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 119               		1: sbiw r24,1
 120               		brne 1b
 121               	 ;  0 "" 2
 122               	/* #NOAPP */
 123               	.LBE34:
 124 0024 CA01      	.LBE35:
 125               	.LBE36:
 126               	.LBE37:
 128 0028 01F4      	.Ltext4:
 130               	.LM6:
 131               		out 56-32,__zero_reg__
 132               	.LBB38:
 133               	.LBB39:
 134               	.LBB40:
 135               	.LBB41:
  10:main.c        **** _delay_ms(10);
  11:main.c        **** PORTB=0x00;
 137               	B1
 138               	.LM7:
 139 002a 18BA      		movw r24,r20
 140               	/* #APP */
 141               	 ;  105 "g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 142               		1: sbiw r24,1
 143               		brne 1b
 144               	 ;  0 "" 2
 145               	/* #NOAPP */
 146               	.LBE41:
 147               	.LBE40:
 148 002c CA01      	.LBE39:
 149               	.LBE38:
 151 002e 0197      	.Ltext6:
 153               	.LM8:
 154               		subi r18,lo8(-(1))
 155               		sbci r19,hi8(-(1))
 156               		cpi r18,4
 157               		cpc r19,__zero_reg__
 158               		brne .L2
 159               	/* epilogue start */
 161               	.LM9:
 162               		pop r25
 163 0032 2F5F      		pop r24
 164 0034 3F4F      		pop r22
 165 0036 2430      		pop r21
 166 0038 3105      		pop r20
 167 003a 01F4      		pop r19
 168               		pop r18
  12:main.c        **** _delay_ms(10);
  13:main.c        **** 
  14:main.c        **** }
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** }
 169               	18,4
 170               		cpc r19,__zero_reg__
 171 003c 9F91      		brne .L2
 172 003e 8F91      	/* epilogue start */
 174 0042 5F91      	.LM9:
 175 0044 4F91      		pop r25
 176 0046 3F91      		pop r24
 177 0048 2F91      		pop r22
 178 004a 0F90      		pop r21
 179 004c 0FBE      		pop r20
 180 004e 0F90      		pop r19
 181 0050 1F90      		pop r18
 182 0052 1895      		pop r0
 183               		out __SREG__,r0
 184               		pop r0
 185               		pop __zero_reg__
 186               		reti
 191               	.Lscope1:
  18:main.c        **** 
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** void main(){
 192               	reg__
 193               		reti
  22:main.c        **** DDRD=0x01;
 197               	pop r0
 198               		out __SREG__,r0
 199 0054 81E0      		pop r0
 200 0056 81BB      		pop __zero_reg__
  23:main.c        **** PORTD=0b00000100;//pull up as interrupt is also a reg
 201               	*/
 203 0058 94E0      	.LM9:
 204 005a 92BB      		pop r25
  24:main.c        **** DDRB=0x01;//making LED o/p
 205               	-.LFBB1
 206               	.LM8:
 207 005c 87BB      		subi r18,lo8(-(1))
  25:main.c        **** MCUCR=0x01;//triggering
 208               	iw r24,1
 209               		brne 1b
 210 005e 85BF      	 ;  0 "" 2
  26:main.c        **** GICR=0x40;//enable int0/1/2
 211               	.Ltext5
 212               	.Ltext5:
 214 0062 8BBF      	.LM7:
  27:main.c        **** sei();//global interrupt enable
 215               	M6:
 216               		out 56-32,__zero_reg__
 217               	.LBB38:
 218               	.LBB39:
 219 0064 7894      	.LBB40:
 220               	.LBB41:
 222               	.Ltext5:
 224               	.LM7:
 225               		movw r24,r20
 226               	/* #APP */
 227               	 ;  105 "g:/winavr/lib/gcc/../../avr/include/util/delay_basic.h" 1
 228               		1: sbiw r24,1
 229               		brne 1b
 230 0066 2CE2      	 ;  0 "" 2
 231 0068 31E0      	/* #NOAPP */
 232               	.LBE41:
 233               	.LBE40:
 234               	.LBE39:
 235               	.LBE38:
 237               	.Ltext6:
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** while(1){
  31:main.c        **** PORTB=0x00;
  32:main.c        **** _delay_ms(100);
  33:main.c        **** PORTB=0x01;
 238               	r/lib/gcc/../../avr/include/util/delay_basic.h" 1
 239               		1: sbiw r24,1
 240 006a 41E0      		brne 1b
 241               	 ;  0 "" 2
 242               	/* #NOAPP */
 243               	.LBE41:
 244 006c 18BA      	.LBE40:
 245 006e 88EE      	.LBE39:
 246 0070 93E0      	.LBE38:
 248               	.Ltext6:
 250               	.LM8:
 251               		subi r18,lo8(-(1))
 252               		sbci r19,hi8(-(1))
 253               		cpi r18,4
 254               		cpc r19,__zero_reg__
 255               		brne .L2
 256 0072 F901      	/* epilogue start */
 258               	.LM9:
 259 0074 3197      		pop r25
 260 0076 01F4      		pop r24
 261               		pop r22
 262               		pop r21
 263               		pop r20
 264               		pop r19
 265               		pop r18
 266               		pop r0
   1:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    All rights reserved.
   5:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   6:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
   9:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  12:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      distribution.
  16:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  17:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  21:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  33:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5.2.1 2009/02/25 10:14:03 joerg_wunsch Exp $ */
  34:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  35:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  38:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <inttypes.h>
  39:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  41:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \file */
  42:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     \code
  44:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     \endcode
  48:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  49:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     used.
  53:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  54:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  63:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     routines linked into the application.
  71:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  72:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  76:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** */
  77:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  78:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  82:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  83:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef F_CPU
  84:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  88:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  89:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** #endif
  92:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  93:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** /**
  94:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    \ingroup util_delay
  95:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  96:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
  97:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
  98:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 101:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 102:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 
 103:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 104:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 105:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 106:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 107:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 108:g:/winavr/lib/gcc/../../avr/include/util/delay.h ****  */
 109:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** void
 110:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** _delay_ms(double __ms)
 111:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** {
 112:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 	uint16_t __ticks;
 113:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 114:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 115:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = 1;
 116:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 117:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 	{
 118:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 119:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 120:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 		while(__ticks)
 121:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 		{
 122:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 			// wait 1/10 ms
 123:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 124:g:/winavr/lib/gcc/../../avr/include/util/delay.h **** 			__ticks --;
 267               	 r19,__zero_reg__
 268               		brne .L2
 269 0078 0197      	/* epilogue start */
 271               	.LM9:
 272 007a 01F4      		pop r25
 273               		pop r24
 274               		pop r22
 275               		pop r21
 276               		pop r20
 277               		pop r19
 278               		pop r18
 279 007c 48BB      		pop r0
 280 007e 88EE      		out __SREG__,r0
 281 0080 93E0      		pop r0
 282               		pop __zero_reg__
 283               		reti
 288               	.Lscope1:
 290               	.global	main
 292               	main:
 294 0084 3197      	.LM10:
 295 0086 01F4      	.LFBB2:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 299               	.LM11:
 300               		ldi r24,lo8(1)
 301               		out 49-32,r24
 303               	.LM12:
 304 0088 0197      		ldi r25,lo8(4)
 305               		out 50-32,r25
 307 008a 01F4      	.LM13:
 308 008c 00C0      		out 55-32,r24
 310               	.LM14:
 311               		out 85-32,r24
 313               	.LM15:
 314               		ldi r24,lo8(64)
 315               		out 91-32,r24
 317               	.LM16:
 318               	/* #APP */
 319               	 ;  27 "main.c" 1
 320               		sei
 321               	 ;  0 "" 2
 322               	/* #NOAPP */
 323               	.LBB42:
 324               	.LBB43:
 325               	.LBB44:
 326               	.LBB45:
 328               	.Ltext7:
 330               	.LM17:
 331               		ldi r18,lo8(300)
 332               		ldi r19,hi8(300)
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:2      *ABS*:0000003f __SREG__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:3      *ABS*:0000003e __SP_H__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:4      *ABS*:0000003d __SP_L__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:5      *ABS*:00000034 __CCP__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:7      *ABS*:00000001 __zero_reg__
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:71     .text:00000000 __vector_1
C:\Users\PRATHVI\AppData\Local\Temp/ccUA9ttE.s:191    .text:00000054 main

NO UNDEFINED SYMBOLS
