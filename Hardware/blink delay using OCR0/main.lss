
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000661  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:



}

void delay(){
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
int count;
for(count=0;count<100;count++){
TCCR0=0x05;
  70:	45 e0       	ldi	r20, 0x05	; 5
OCR0=157;
  72:	3d e9       	ldi	r19, 0x9D	; 157
while((TIFR &0x02)==0);
TIFR=0x02;
  74:	22 e0       	ldi	r18, 0x02	; 2
}

void delay(){
int count;
for(count=0;count<100;count++){
TCCR0=0x05;
  76:	43 bf       	out	0x33, r20	; 51
OCR0=157;
  78:	3c bf       	out	0x3c, r19	; 60
while((TIFR &0x02)==0);
  7a:	08 b6       	in	r0, 0x38	; 56
  7c:	01 fe       	sbrs	r0, 1
  7e:	fd cf       	rjmp	.-6      	; 0x7a <delay+0xe>
TIFR=0x02;
  80:	28 bf       	out	0x38, r18	; 56
TCNT0=0;
  82:	12 be       	out	0x32, r1	; 50

}

void delay(){
int count;
for(count=0;count<100;count++){
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	84 36       	cpi	r24, 0x64	; 100
  88:	91 05       	cpc	r25, r1
  8a:	a9 f7       	brne	.-22     	; 0x76 <delay+0xa>
while((TIFR &0x02)==0);
TIFR=0x02;
TCNT0=0;
}

  8c:	08 95       	ret

0000008e <main>:
#include<avr/io.h>

void delay();


void main(){
  8e:	1f 93       	push	r17
DDRB=0x01;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	87 bb       	out	0x17, r24	; 23

while(1){

PORTB=0x00;
delay();
PORTB=0x01;
  94:	11 e0       	ldi	r17, 0x01	; 1



while(1){

PORTB=0x00;
  96:	18 ba       	out	0x18, r1	; 24
delay();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
PORTB=0x01;
  9c:	18 bb       	out	0x18, r17	; 24
delay();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
  a2:	f9 cf       	rjmp	.-14     	; 0x96 <main+0x8>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
