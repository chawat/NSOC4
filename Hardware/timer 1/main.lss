
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000390  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000654  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:


void delay(){


TCNT1H=0xc2;
  6c:	82 ec       	ldi	r24, 0xC2	; 194
  6e:	8d bd       	out	0x2d, r24	; 45
TCNT1L=0xf7;
  70:	87 ef       	ldi	r24, 0xF7	; 247
  72:	8c bd       	out	0x2c, r24	; 44
TCCR1B=0x05;
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	8e bd       	out	0x2e, r24	; 46
while((TIFR&0x04)==0);
  78:	08 b6       	in	r0, 0x38	; 56
  7a:	02 fe       	sbrs	r0, 2
  7c:	fd cf       	rjmp	.-6      	; 0x78 <delay+0xc>
TIFR=0x04;
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	88 bf       	out	0x38, r24	; 56



  82:	08 95       	ret

00000084 <main>:
#include<avr/io.h>


void delay();

void main(){
  84:	1f 93       	push	r17
DDRB=0x01;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	87 bb       	out	0x17, r24	; 23

while(1){

PORTB=0x00;
delay();
PORTB=0x01;
  8a:	11 e0       	ldi	r17, 0x01	; 1
void main(){
DDRB=0x01;

while(1){

PORTB=0x00;
  8c:	18 ba       	out	0x18, r1	; 24
delay();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
PORTB=0x01;
  92:	18 bb       	out	0x18, r17	; 24
delay();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
  98:	f9 cf       	rjmp	.-14     	; 0x8c <main+0x8>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
