
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a80  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009c3  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:
#include<avr/interrupt.h>			//header file for using interrupt service routins


 void adc_init()
 {
  ADCSRA=0XE6;						//ADC enable, ADC interrupt enable, set prescaller to 64
  6c:	86 ee       	ldi	r24, 0xE6	; 230
  6e:	86 b9       	out	0x06, r24	; 6
  		
 }
  70:	08 95       	ret

00000072 <getdata>:
 unsigned int getdata(unsigned char chno)	
  {
	unsigned int adcdata,adcdata1;
    ADMUX=0X40;						//right align the ADC result
  72:	90 e4       	ldi	r25, 0x40	; 64
  74:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  76:	97 b1       	in	r25, 0x07	; 7
  78:	98 2b       	or	r25, r24
  7a:	97 b9       	out	0x07, r25	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	88 eb       	ldi	r24, 0xB8	; 184
  7e:	9b e0       	ldi	r25, 0x0B	; 11
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <getdata+0xe>
    //ADCSRA|=0X40;					//start ADC convertion
    _delay_ms(1);
adcdata1=ADCL;					//give some time delay to complit the aDC convertion
  84:	94 b1       	in	r25, 0x04	; 4
	adcdata=ADCH;
  86:	85 b1       	in	r24, 0x05	; 5
  88:	38 2f       	mov	r19, r24
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	29 0f       	add	r18, r25
  8e:	31 1d       	adc	r19, r1
	
	adcdata1+=(adcdata<<8);
	return (adcdata1);
	
	
  }
  90:	c9 01       	movw	r24, r18
  92:	08 95       	ret

00000094 <cmd>:

}


void cmd(unsigned char a){
PORTB=a;
  94:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	82 bb       	out	0x12, r24	; 18
  9a:	88 eb       	ldi	r24, 0xB8	; 184
  9c:	9b e0       	ldi	r25, 0x0B	; 11
  9e:	fc 01       	movw	r30, r24
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <cmd+0xc>
_delay_ms(1);
PORTD=0x00;
  a4:	12 ba       	out	0x12, r1	; 18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <cmd+0x12>
_delay_ms(1);



}
  aa:	08 95       	ret

000000ac <data>:

void data(unsigned char a){
PORTB=a;
  ac:	88 bb       	out	0x18, r24	; 24
PORTD=0x05;//making en and rs as 1
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	88 eb       	ldi	r24, 0xB8	; 184
  b4:	9b e0       	ldi	r25, 0x0B	; 11
  b6:	fc 01       	movw	r30, r24
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <data+0xc>
_delay_ms(1);
PORTD=0x00;
  bc:	12 ba       	out	0x12, r1	; 18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <data+0x12>
_delay_ms(1);


  c2:	08 95       	ret

000000c4 <main>:
#include <stdlib.h>

void cmd(unsigned char);
void data(unsigned char);

void main(){
  c4:	4f 92       	push	r4
  c6:	5f 92       	push	r5
  c8:	6f 92       	push	r6
  ca:	7f 92       	push	r7
  cc:	8f 92       	push	r8
  ce:	9f 92       	push	r9
  d0:	af 92       	push	r10
  d2:	bf 92       	push	r11
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2a 97       	sbiw	r28, 0x0a	; 10
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
char c[10];
int i=1000,j;
DDRB=0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
DDRD=0xff;
  f8:	81 bb       	out	0x11, r24	; 17

}


void cmd(unsigned char a){
PORTB=a;
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	92 bb       	out	0x12, r25	; 18
 102:	28 eb       	ldi	r18, 0xB8	; 184
 104:	3b e0       	ldi	r19, 0x0B	; 11
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x44>
_delay_ms(1);
PORTD=0x00;
 10c:	12 ba       	out	0x12, r1	; 18
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x4c>

}


void cmd(unsigned char a){
PORTB=a;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 118:	92 bb       	out	0x12, r25	; 18
 11a:	f9 01       	movw	r30, r18
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x58>
_delay_ms(1);
PORTD=0x00;
 120:	12 ba       	out	0x12, r1	; 18
 122:	f9 01       	movw	r30, r18
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x60>

}


void cmd(unsigned char a){
PORTB=a;
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 12c:	92 bb       	out	0x12, r25	; 18
 12e:	f9 01       	movw	r30, r18
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x6c>
_delay_ms(1);
PORTD=0x00;
 134:	12 ba       	out	0x12, r1	; 18
 136:	f9 01       	movw	r30, r18
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x74>

}


void cmd(unsigned char a){
PORTB=a;
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 140:	92 bb       	out	0x12, r25	; 18
 142:	c9 01       	movw	r24, r18
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x80>
_delay_ms(1);
PORTD=0x00;
 148:	12 ba       	out	0x12, r1	; 18
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x88>
#include<avr/interrupt.h>			//header file for using interrupt service routins


 void adc_init()
 {
  ADCSRA=0XE6;						//ADC enable, ADC interrupt enable, set prescaller to 64
 150:	86 ee       	ldi	r24, 0xE6	; 230
 152:	86 b9       	out	0x06, r24	; 6
  		
 }
 unsigned int getdata(unsigned char chno)	
  {
	unsigned int adcdata,adcdata1;
    ADMUX=0X40;						//right align the ADC result
 154:	50 e4       	ldi	r21, 0x40	; 64
 156:	45 2e       	mov	r4, r21
 158:	48 eb       	ldi	r20, 0xB8	; 184
 15a:	e4 2e       	mov	r14, r20
 15c:	4b e0       	ldi	r20, 0x0B	; 11
 15e:	f4 2e       	mov	r15, r20
adc_init();


while(1){
i=getdata(0x01);
itoa(i,c,10);
 160:	6e 01       	movw	r12, r28
 162:	08 94       	sec
 164:	c1 1c       	adc	r12, r1
 166:	d1 1c       	adc	r13, r1

}

void data(unsigned char a){
PORTB=a;
PORTD=0x05;//making en and rs as 1
 168:	35 e0       	ldi	r19, 0x05	; 5
 16a:	53 2e       	mov	r5, r19


while(1){
i=getdata(0x01);
itoa(i,c,10);
for(j=0;j<4;j++)
 16c:	25 e0       	ldi	r18, 0x05	; 5
 16e:	82 2e       	mov	r8, r18
 170:	91 2c       	mov	r9, r1
 172:	8c 0e       	add	r8, r28
 174:	9d 1e       	adc	r9, r29
 176:	9c e2       	ldi	r25, 0x2C	; 44
 178:	a9 2e       	mov	r10, r25
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	b9 2e       	mov	r11, r25

}


void cmd(unsigned char a){
PORTB=a;
 17e:	66 24       	eor	r6, r6
 180:	63 94       	inc	r6
PORTD=0x04;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	78 2e       	mov	r7, r24
 186:	47 b8       	out	0x07, r4	; 7
    ADMUX|=chno;					//select the ADC channel
 188:	38 9a       	sbi	0x07, 0	; 7
 18a:	c7 01       	movw	r24, r14
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xc8>
    //ADCSRA|=0X40;					//start ADC convertion
    _delay_ms(1);
adcdata1=ADCL;					//give some time delay to complit the aDC convertion
 190:	94 b1       	in	r25, 0x04	; 4
	adcdata=ADCH;
 192:	85 b1       	in	r24, 0x05	; 5
adc_init();


while(1){
i=getdata(0x01);
itoa(i,c,10);
 194:	18 2f       	mov	r17, r24
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	98 01       	movw	r18, r16
 19a:	29 0f       	add	r18, r25
 19c:	31 1d       	adc	r19, r1
 19e:	c9 01       	movw	r24, r18
 1a0:	b6 01       	movw	r22, r12
 1a2:	4a e0       	ldi	r20, 0x0A	; 10
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <itoa>
 1aa:	f6 01       	movw	r30, r12
for(j=0;j<4;j++)
{
data(c[j]);
 1ac:	81 91       	ld	r24, Z+


}

void data(unsigned char a){
PORTB=a;
 1ae:	88 bb       	out	0x18, r24	; 24
PORTD=0x05;//making en and rs as 1
 1b0:	52 ba       	out	0x12, r5	; 18
 1b2:	c7 01       	movw	r24, r14
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xf0>
_delay_ms(1);
PORTD=0x00;
 1b8:	12 ba       	out	0x12, r1	; 18
 1ba:	c7 01       	movw	r24, r14
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xf8>


while(1){
i=getdata(0x01);
itoa(i,c,10);
for(j=0;j<4;j++)
 1c0:	e8 15       	cp	r30, r8
 1c2:	f9 05       	cpc	r31, r9
 1c4:	99 f7       	brne	.-26     	; 0x1ac <main+0xe8>
 1c6:	84 ef       	ldi	r24, 0xF4	; 244
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	f5 01       	movw	r30, r10
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x108>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	d9 f7       	brne	.-10     	; 0x1ca <main+0x106>

}


void cmd(unsigned char a){
PORTB=a;
 1d4:	68 ba       	out	0x18, r6	; 24
PORTD=0x04;
 1d6:	72 ba       	out	0x12, r7	; 18
 1d8:	c7 01       	movw	r24, r14
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x116>
_delay_ms(1);
PORTD=0x00;
 1de:	12 ba       	out	0x12, r1	; 18
 1e0:	c7 01       	movw	r24, r14
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x11e>
 1e6:	cf cf       	rjmp	.-98     	; 0x186 <main+0xc2>

000001e8 <itoa>:
 1e8:	fb 01       	movw	r30, r22
 1ea:	9f 01       	movw	r18, r30
 1ec:	e8 94       	clt
 1ee:	42 30       	cpi	r20, 0x02	; 2
 1f0:	c4 f0       	brlt	.+48     	; 0x222 <itoa+0x3a>
 1f2:	45 32       	cpi	r20, 0x25	; 37
 1f4:	b4 f4       	brge	.+44     	; 0x222 <itoa+0x3a>
 1f6:	4a 30       	cpi	r20, 0x0A	; 10
 1f8:	29 f4       	brne	.+10     	; 0x204 <itoa+0x1c>
 1fa:	97 fb       	bst	r25, 7
 1fc:	1e f4       	brtc	.+6      	; 0x204 <itoa+0x1c>
 1fe:	90 95       	com	r25
 200:	81 95       	neg	r24
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	64 2f       	mov	r22, r20
 206:	77 27       	eor	r23, r23
 208:	0e 94 25 01 	call	0x24a	; 0x24a <__udivmodhi4>
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	8a 33       	cpi	r24, 0x3A	; 58
 210:	0c f0       	brlt	.+2      	; 0x214 <itoa+0x2c>
 212:	89 5d       	subi	r24, 0xD9	; 217
 214:	81 93       	st	Z+, r24
 216:	cb 01       	movw	r24, r22
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	a1 f7       	brne	.-24     	; 0x204 <itoa+0x1c>
 21c:	16 f4       	brtc	.+4      	; 0x222 <itoa+0x3a>
 21e:	5d e2       	ldi	r21, 0x2D	; 45
 220:	51 93       	st	Z+, r21
 222:	10 82       	st	Z, r1
 224:	c9 01       	movw	r24, r18
 226:	0c 94 15 01 	jmp	0x22a	; 0x22a <strrev>

0000022a <strrev>:
 22a:	dc 01       	movw	r26, r24
 22c:	fc 01       	movw	r30, r24
 22e:	67 2f       	mov	r22, r23
 230:	71 91       	ld	r23, Z+
 232:	77 23       	and	r23, r23
 234:	e1 f7       	brne	.-8      	; 0x22e <strrev+0x4>
 236:	32 97       	sbiw	r30, 0x02	; 2
 238:	04 c0       	rjmp	.+8      	; 0x242 <strrev+0x18>
 23a:	7c 91       	ld	r23, X
 23c:	6d 93       	st	X+, r22
 23e:	70 83       	st	Z, r23
 240:	62 91       	ld	r22, -Z
 242:	ae 17       	cp	r26, r30
 244:	bf 07       	cpc	r27, r31
 246:	c8 f3       	brcs	.-14     	; 0x23a <strrev+0x10>
 248:	08 95       	ret

0000024a <__udivmodhi4>:
 24a:	aa 1b       	sub	r26, r26
 24c:	bb 1b       	sub	r27, r27
 24e:	51 e1       	ldi	r21, 0x11	; 17
 250:	07 c0       	rjmp	.+14     	; 0x260 <__udivmodhi4_ep>

00000252 <__udivmodhi4_loop>:
 252:	aa 1f       	adc	r26, r26
 254:	bb 1f       	adc	r27, r27
 256:	a6 17       	cp	r26, r22
 258:	b7 07       	cpc	r27, r23
 25a:	10 f0       	brcs	.+4      	; 0x260 <__udivmodhi4_ep>
 25c:	a6 1b       	sub	r26, r22
 25e:	b7 0b       	sbc	r27, r23

00000260 <__udivmodhi4_ep>:
 260:	88 1f       	adc	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	5a 95       	dec	r21
 266:	a9 f7       	brne	.-22     	; 0x252 <__udivmodhi4_loop>
 268:	80 95       	com	r24
 26a:	90 95       	com	r25
 26c:	bc 01       	movw	r22, r24
 26e:	cd 01       	movw	r24, r26
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
