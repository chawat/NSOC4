
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005e8  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000074f  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  7a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <dispdata>:
}
 
 
unsigned char dispdata()
{
  while((UCSRA&0x80)==0x00);
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <dispdata>
  return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <delayuart>:
 
void delayuart(unsigned int delaytime)
{
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
unsigned int dc;
	 for(dc=0;dc<=delaytime;dc++)
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  8e:	00 00       	nop
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 00       	nop
  96:	00 00       	nop
  98:	00 00       	nop
		  asm("nop");asm("nop");asm("nop");asm("nop");
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	00 00       	nop
  a0:	00 00       	nop
}
 
void delayuart(unsigned int delaytime)
{
unsigned int dc;
	 for(dc=0;dc<=delaytime;dc++)
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	82 17       	cp	r24, r18
  a8:	93 07       	cpc	r25, r19
  aa:	88 f7       	brcc	.-30     	; 0x8e <delayuart+0x4>
	 {
		 
		  asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		  asm("nop");asm("nop");asm("nop");asm("nop");
	 }
}
  ac:	08 95       	ret

000000ae <printchar>:
	delayuart(1000);
}

void printchar(unsigned char uchar)
{
  UDR=uchar;
  ae:	8c b9       	out	0x0c, r24	; 12
  while((UCSRA&0x40)==0x00);
  b0:	5e 9b       	sbis	0x0b, 6	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <printchar+0x2>
  delayuart(1000);
  b4:	88 ee       	ldi	r24, 0xE8	; 232
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	0e 94 45 00 	call	0x8a	; 0x8a <delayuart>
}
  bc:	08 95       	ret

000000be <printnum>:
	
}	}

 
void printnum(unsigned int num)
{
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
    unsigned char paa=0, H=0,T=0,O=0;
	paa=num/1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
  d8:	46 2f       	mov	r20, r22
	
	H=(num-(paa*1000))/100;
  da:	26 2f       	mov	r18, r22
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	9c ef       	ldi	r25, 0xFC	; 252
  e2:	28 9f       	mul	r18, r24
  e4:	70 01       	movw	r14, r0
  e6:	29 9f       	mul	r18, r25
  e8:	f0 0c       	add	r15, r0
  ea:	38 9f       	mul	r19, r24
  ec:	f0 0c       	add	r15, r0
  ee:	11 24       	eor	r1, r1
  f0:	f7 01       	movw	r30, r14
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	cf 01       	movw	r24, r30
  f8:	64 e6       	ldi	r22, 0x64	; 100
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
 100:	d6 2e       	mov	r13, r22
	T=(num -(paa*1000) -(H*100))/10;
 102:	26 2f       	mov	r18, r22
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	8c e9       	ldi	r24, 0x9C	; 156
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	28 9f       	mul	r18, r24
 10c:	80 01       	movw	r16, r0
 10e:	29 9f       	mul	r18, r25
 110:	10 0d       	add	r17, r0
 112:	38 9f       	mul	r19, r24
 114:	10 0d       	add	r17, r0
 116:	11 24       	eor	r1, r1
 118:	cf 01       	movw	r24, r30
 11a:	80 0f       	add	r24, r16
 11c:	91 1f       	adc	r25, r17
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
 126:	c6 2e       	mov	r12, r22
	O=(num - (paa*1000) -(H*100) - (T*10));
	
	if(paa!=0)
 128:	44 23       	and	r20, r20
 12a:	21 f0       	breq	.+8      	; 0x134 <printnum+0x76>
	{printchar(paa+48);}
 12c:	84 2f       	mov	r24, r20
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	0e 94 57 00 	call	0xae	; 0xae <printchar>
	printchar(H+48);
 134:	8d 2d       	mov	r24, r13
 136:	80 5d       	subi	r24, 0xD0	; 208
 138:	0e 94 57 00 	call	0xae	; 0xae <printchar>
	
	printchar(T+48);
 13c:	8c 2d       	mov	r24, r12
 13e:	80 5d       	subi	r24, 0xD0	; 208
 140:	0e 94 57 00 	call	0xae	; 0xae <printchar>
	
	printchar(O+48);
 144:	ce 01       	movw	r24, r28
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	28 2f       	mov	r18, r24
 14a:	2e 0d       	add	r18, r14
 14c:	20 0f       	add	r18, r16
 14e:	86 ef       	ldi	r24, 0xF6	; 246
 150:	9f ef       	ldi	r25, 0xFF	; 255
 152:	c8 9e       	mul	r12, r24
 154:	80 2d       	mov	r24, r0
 156:	11 24       	eor	r1, r1
 158:	82 0f       	add	r24, r18
 15a:	0e 94 57 00 	call	0xae	; 0xae <printchar>
	
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	08 95       	ret

00000170 <printstring>:
  while((UCSRA&0x40)==0x00);
  delayuart(1000);
}
 
void printstring(const unsigned char *ustring)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	03 c0       	rjmp	.+6      	; 0x17e <printstring+0xe>
   while ( *ustring )
    {
	 printchar( *ustring++);
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	0e 94 57 00 	call	0xae	; 0xae <printchar>
  delayuart(1000);
}
 
void printstring(const unsigned char *ustring)
{
   while ( *ustring )
 17e:	88 81       	ld	r24, Y
 180:	88 23       	and	r24, r24
 182:	d1 f7       	brne	.-12     	; 0x178 <printstring+0x8>
    {
	 printchar( *ustring++);
	
}	}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <uartinit>:
#ifndef _UART_H_
#define _UART_H_

void uartinit()
{
	UCSRA=0x00;
 18a:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
 190:	86 e8       	ldi	r24, 0x86	; 134
 192:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
 194:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
 196:	83 e3       	ldi	r24, 0x33	; 51
 198:	89 b9       	out	0x09, r24	; 9
	delayuart(1000);
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	0e 94 45 00 	call	0x8a	; 0x8a <delayuart>
}
 1a2:	08 95       	ret

000001a4 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "uart.h"

void main(){
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	
	uartinit();
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <uartinit>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ac:	c0 e3       	ldi	r28, 0x30	; 48
 1ae:	d5 e7       	ldi	r29, 0x75	; 117
	
	while(1){
	printnum(10);
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <printnum>
printstring("\n\r");
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 b8 00 	call	0x170	; 0x170 <printstring>
 1c0:	ce 01       	movw	r24, r28
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x1e>
 1c6:	f4 cf       	rjmp	.-24     	; 0x1b0 <main+0xc>

000001c8 <__udivmodhi4>:
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	51 e1       	ldi	r21, 0x11	; 17
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__udivmodhi4_ep>

000001d0 <__udivmodhi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	a6 17       	cp	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	10 f0       	brcs	.+4      	; 0x1de <__udivmodhi4_ep>
 1da:	a6 1b       	sub	r26, r22
 1dc:	b7 0b       	sbc	r27, r23

000001de <__udivmodhi4_ep>:
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	5a 95       	dec	r21
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <__udivmodhi4_loop>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
