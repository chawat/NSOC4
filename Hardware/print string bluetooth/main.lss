
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005b8  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000076f  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:

/*Function defination*/

void usart_init()
{
UBRRH = 0;
  82:	10 bc       	out	0x20, r1	; 32
UBRRL =10;
  84:	8a e0       	ldi	r24, 0x0A	; 10
  86:	89 b9       	out	0x09, r24	; 9
UCSRA |=(1<U2X);
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	8b b9       	out	0x0b, r24	; 11
UCSRB|= (1<<RXEN)|(1<<TXEN);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	8a b9       	out	0x0a, r24	; 10
UCSRC |= (1 << URSEL)|(3<<UCSZ0);
  92:	80 b5       	in	r24, 0x20	; 32
  94:	86 68       	ori	r24, 0x86	; 134
  96:	80 bd       	out	0x20, r24	; 32
}
  98:	08 95       	ret

0000009a <usart_data_transmit>:


void usart_data_transmit(unsigned char data )
{
while ( !( UCSRA & (1<<UDRE)) )
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <usart_data_transmit>
;
UDR = data;
  9e:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	88 eb       	ldi	r24, 0xB8	; 184
  a2:	9b e0       	ldi	r25, 0x0B	; 11
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <usart_data_transmit+0xa>
_delay_ms(1);
}
  a8:	08 95       	ret

000000aa <usart_data_receive>:

unsigned char usart_data_receive( void )
{
while ( !(UCSRA & (1<<RXC)) )
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <usart_data_receive>
;
return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <usart_string_transmit>:

void usart_string_transmit(char *string)
{
  b2:	fc 01       	movw	r30, r24
  b4:	28 eb       	ldi	r18, 0xB8	; 184
  b6:	3b e0       	ldi	r19, 0x0B	; 11
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <usart_string_transmit+0x16>
}


void usart_data_transmit(unsigned char data )
{
while ( !( UCSRA & (1<<UDRE)) )
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <usart_string_transmit+0x8>

void usart_string_transmit(char *string)
{
while(*string)
{
usart_data_transmit(*string++);
  be:	31 96       	adiw	r30, 0x01	; 1

void usart_data_transmit(unsigned char data )
{
while ( !( UCSRA & (1<<UDRE)) )
;
UDR = data;
  c0:	8c b9       	out	0x0c, r24	; 12
  c2:	c9 01       	movw	r24, r18
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <usart_string_transmit+0x12>
return UDR;
}

void usart_string_transmit(char *string)
{
while(*string)
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	b1 f7       	brne	.-20     	; 0xba <usart_string_transmit+0x8>
{
usart_data_transmit(*string++);
}
}
  ce:	08 95       	ret

000000d0 <usart_string_receive>:

char *usart_string_receive(char *receive_string,unsigned char terminating_character)
{
  d0:	9c 01       	movw	r18, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
_delay_ms(1);
}

unsigned char usart_data_receive( void )
{
while ( !(UCSRA & (1<<RXC)) )
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <usart_string_receive+0x4>
;
return UDR;
  d8:	8c b1       	in	r24, 0x0c	; 12
char *usart_string_receive(char *receive_string,unsigned char terminating_character)
{
	unsigned char temp=0x00;
	for(unsigned char i=0;;i++)
	{
		*(receive_string+i)=usart_data_receive();
  da:	f9 01       	movw	r30, r18
  dc:	e9 0f       	add	r30, r25
  de:	f1 1d       	adc	r31, r1
  e0:	80 83       	st	Z, r24
		if(*(receive_string+i)==terminating_character)
  e2:	86 17       	cp	r24, r22
  e4:	11 f0       	breq	.+4      	; 0xea <usart_string_receive+0x1a>
			break;
		else
		temp++;
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	f5 cf       	rjmp	.-22     	; 0xd4 <usart_string_receive+0x4>
	}
	*(receive_string+temp)='\0';
  ea:	10 82       	st	Z, r1
	return receive_string;
}
  ec:	c9 01       	movw	r24, r18
  ee:	08 95       	ret

000000f0 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "usart.h"

void main()
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29

usart_init();
  f4:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>
  f8:	c0 e3       	ldi	r28, 0x30	; 48
  fa:	d5 e7       	ldi	r29, 0x75	; 117

while(1){
usart_string_transmit("NSOC 4.0\n\r");
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_string_transmit>
 104:	ce 01       	movw	r24, r28
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x16>
 10a:	f8 cf       	rjmp	.-16     	; 0xfc <main+0xc>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
